apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion appCompileSdkVersion
    flavorDimensions("default")
    productFlavors {
        qrscanner {
            applicationId "tpcreative.co.qrscanner"
            minSdkVersion appMinSdkVersion
            targetSdkVersion appTargetSdkVersion
            versionCode appVersionCode
            versionName appVersionName
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            multiDexEnabled true
        }

        superqrscanner {
            applicationId "com.superqrscanner"
            minSdkVersion appMinSdkVersion
            targetSdkVersion appTargetSdkVersion
            versionCode appVersionCode
            versionName appVersionName
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            multiDexEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
        freedevelop {
            initWith(buildTypes.debug)
            applicationIdSuffix ".free.develop"

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled false

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources false

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        freerelease {
            //initWith(buildTypes.debug)
            applicationIdSuffix ".free.release"
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        freeinnovation {
            initWith(buildTypes.debug)
            applicationIdSuffix ".free.innovation"
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled false

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources false

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }


    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
}


dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$appSupportVersion"
    implementation "androidx.recyclerview:recyclerview:$appRecyclerView"
    implementation "com.google.android.material:material:$appGoogleMaterial"
    implementation "androidx.legacy:legacy-preference-v14:$apppreferenceV14"
    implementation "androidx.cardview:cardview:$appCardView"
    implementation "androidx.constraintlayout:constraintlayout:$appConstraintlayout"
    implementation "androidx.multidex:multidex:$appMultidex"
    implementation "com.google.code.gson:gson:$gson"
    implementation "com.google.zxing:core:$zxingCore"
    implementation "com.karumi:dexter:$dexter"
    /*Simple recyclerview*/
    implementation project(':simplerecyclerview')
    /*Validation input*/
    implementation "com.basgeekball:awesome-validation:$awesomeValidation"
    /*Google map*/
    implementation "com.google.android.gms:play-services-maps:$playServicesMaps"
    implementation "androidx.room:room-runtime:$roomVersion"
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$roomVersion")

    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    testImplementation "junit:junit:$junit"
    androidTestImplementation "com.android.support.test:runner:$testRnner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoCore"
    /*DateTime picker*/
    implementation project(':switchdatetime')
    /*Zxing*/
    //implementation project(':zxing-android-embedded')
    /*CropView*/
    implementation project(':simplecropview')
    /*Flagkit*/
    implementation project(':flagkit')
    implementation "commons-validator:commons-validator:$commonsValidator"
    /*Google admod*/
    implementation "com.google.android.gms:play-services-ads:$playServicesAds"
    // Add the Firebase Crashlytics SDK.
    implementation "com.google.firebase:firebase-crashlytics:$firebaseCrashlytics"
    // Recommended: Add the Google Analytics SDK.
    implementation "com.google.firebase:firebase-analytics:$firebaseAnalytics"
    // Dependencies for the REST API example
    implementation "com.google.api-client:google-api-client-android:$googleApiClientAndroid"
    /*Google drive*/
    implementation "com.google.apis:google-api-services-drive:$googleApiServicesDrive"
    implementation "com.google.android.gms:play-services-drive:$playServicesDrive"
    implementation "com.google.android.gms:play-services-auth:$playServicesAuth"

    /*Retrofit*/
    implementation "com.jakewharton.timber:timber:$timber"
    implementation "com.squareup.retrofit2:retrofit:$appRetrofit"
    implementation "com.squareup.retrofit2:converter-gson:$appRetrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$appRetrofit"
    /*CSV*/
    implementation "com.opencsv:opencsv:$opencsv"
    /*Drop down alert*/
    implementation "com.tapadoo.android:alerter:$alerter"
    implementation "androidx.exifinterface:exifinterface:$exifinterface"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarJDKLibs"
    //implementation "com.google.android.play:core:$androidPlayCore"
    implementation "com.google.android.play:review:$playReview"
    implementation "com.google.android.play:review-ktx:$playReview"
    implementation "com.google.guava:listenablefuture:$avoidConflictWithGuava"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$kotlin_core_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensions"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleExtensions"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleLivedataKTX"
    implementation "com.squareup.okhttp3:logging-interceptor:$loggingInterceptor"
    implementation "io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:$sectionedRecyclerViewAdapter"
    implementation "androidx.security:security-crypto:$securityCrypto"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroid"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation "androidx.annotation:annotation-experimental:$annotationExperimental"
    implementation "com.google.android.ads:mediation-test-suite:$mediationTestSuite"
    implementation "com.afollestad.material-dialogs:input:$materialDialogsInput"
    implementation "com.afollestad.material-dialogs:core:$materialDialogsInput"
    implementation "com.github.AppIntro:AppIntro:$appIntro"
    implementation "com.anjlab.android.iab.v3:library:$billingInApp"
    implementation "androidx.window:window:$window"
    implementation project(':compressor')
    implementation project(':custom_qr_generator')
    implementation project(':gridcolor')
    implementation project(':dragtoclose')
    implementation project(':multipletype')
    implementation files('libs/zxingcpp-release.aar')
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
}

apply plugin: 'com.google.gms.google-services'